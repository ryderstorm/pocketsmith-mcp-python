[project]
name = "pocketsmith-mcp"
version = "1.0.0"
description = "PocketSmith MCP server (curated read-only by default; Goose-ready; uvx runnable)"
readme = "README.md"
authors = [
    { name = "Damien Storm", email = "damien.r.storm@gmail.com" }
]
license = { file = "LICENSE" }
requires-python = ">=3.11"
dependencies = [
    "fastmcp>=2.11.2",
    "httpx>=0.28.1",
    "python-dotenv>=1.1.1",
    "tenacity>=8.2.3",
]
keywords = ["mcp", "model-context-protocol", "goose", "pocketsmith", "uvx", "ai", "agent"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
]
[project.urls]
Homepage = "https://github.com/ryderstorm/pocketsmith-mcp-python"
Repository = "https://github.com/ryderstorm/pocketsmith-mcp-python"
Issues = "https://github.com/ryderstorm/pocketsmith-mcp-python/issues"

[project.scripts]
pocketsmith-mcp = "pocketsmith_mcp.__main__:main"

[build-system]
requires = ["hatchling>=1.24.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
include = [
  "pocketsmith_mcp/data/openapi.json",
]

[tool.hatch.build.targets.sdist]
include = [
  "pocketsmith_mcp/data/openapi.json",
]

[dependency-groups]
dev = [
    "basedpyright>=1.31.1",
    "pre-commit>=4.2.0",
    "python-semantic-release==10.2.0",
    "ruff>=0.12.8",
    "ty>=0.0.1a17",
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "B"]
ignore = []

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.ty.rules]
# Start conservative; escalate later as code matures
possibly-unresolved-reference = "warn"
division-by-zero = "error"

[tool.semantic_release]
# Use annotated tags like v1.2.3
tag_format = "v{version}"
# Default commit parser (Angular/Conventional Commits)
# commit_parser = "angular"
# Update the version field in pyproject.toml
version_toml = ["pyproject.toml:project.version"]
# Ensure uv.lock stays in sync with version changes and is committed
# Run uv to refresh the lock file, then stage it so PSR includes it
build_command = """
    uv lock
    git add uv.lock
"""
# Also explicitly include uv.lock in the version commit
assets = ["uv.lock"]

[tool.semantic_release.changelog]
# Configure default templates to generate CHANGELOG.md in Markdown
default_templates = { changelog_file = "CHANGELOG.md", output_format = "md" }

[tool.semantic_release.branches]
# Release from the main branch
main = { match = "main" }

[tool.pytest.ini_options]
# Keep Python path resolve consistent with local runs
pythonpath = ["."]
addopts = [
    "--cov=pocketsmith_mcp",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=xml",
    "--cov-fail-under=0",
]
